// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: noticevideostreamserver.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VideostreamserviceClient is the client API for Videostreamservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideostreamserviceClient interface {
	Noticevideostreamserver(ctx context.Context, in *Noticevideostreamserverreq, opts ...grpc.CallOption) (*Noticevideostreamserverres, error)
}

type videostreamserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewVideostreamserviceClient(cc grpc.ClientConnInterface) VideostreamserviceClient {
	return &videostreamserviceClient{cc}
}

func (c *videostreamserviceClient) Noticevideostreamserver(ctx context.Context, in *Noticevideostreamserverreq, opts ...grpc.CallOption) (*Noticevideostreamserverres, error) {
	out := new(Noticevideostreamserverres)
	err := c.cc.Invoke(ctx, "/proto.videostreamservice/noticevideostreamserver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideostreamserviceServer is the server API for Videostreamservice service.
// All implementations should embed UnimplementedVideostreamserviceServer
// for forward compatibility
type VideostreamserviceServer interface {
	Noticevideostreamserver(context.Context, *Noticevideostreamserverreq) (*Noticevideostreamserverres, error)
}

// UnimplementedVideostreamserviceServer should be embedded to have forward compatible implementations.
type UnimplementedVideostreamserviceServer struct {
}

func (UnimplementedVideostreamserviceServer) Noticevideostreamserver(context.Context, *Noticevideostreamserverreq) (*Noticevideostreamserverres, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Noticevideostreamserver not implemented")
}

// UnsafeVideostreamserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideostreamserviceServer will
// result in compilation errors.
type UnsafeVideostreamserviceServer interface {
	mustEmbedUnimplementedVideostreamserviceServer()
}

func RegisterVideostreamserviceServer(s grpc.ServiceRegistrar, srv VideostreamserviceServer) {
	s.RegisterService(&Videostreamservice_ServiceDesc, srv)
}

func _Videostreamservice_Noticevideostreamserver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Noticevideostreamserverreq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideostreamserviceServer).Noticevideostreamserver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.videostreamservice/noticevideostreamserver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideostreamserviceServer).Noticevideostreamserver(ctx, req.(*Noticevideostreamserverreq))
	}
	return interceptor(ctx, in, info, handler)
}

// Videostreamservice_ServiceDesc is the grpc.ServiceDesc for Videostreamservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Videostreamservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.videostreamservice",
	HandlerType: (*VideostreamserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "noticevideostreamserver",
			Handler:    _Videostreamservice_Noticevideostreamserver_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "noticevideostreamserver.proto",
}
